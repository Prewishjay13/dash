 aray destructuring:
 bij de usestate heb je een array met een default waarde erin en een functie hiervoor gebruik je: React.useState
 in de onderstaande vb is result naam van de variable en func naam van de functie result is in dit geval de "Yes" en func is er niet omdat er geen functie 
 geschreven is in de array
 const [result, func] = React.useState("Yes")
console.log(result); geeft in dit geval alleen yes als waarde

 de functie is zodat je de waarde van de variable kan aanpassen.
 vb:  const [isImportant, setIsImportant] = React.useState("Yes")
    function handleClick() {
        setIsImportant("No")
    }

naamgeving:
 const [isImportant, setIsImportant]   variable naam eerst en dan set voor de functie naam met variable naam

   const [count, setCount] = React.useState(0)
    
    function add() {
        setCount(count + 1)
    }
    
    function subtract() {
        setCount(count - 1)
    }
    
    return (
        <div className="counter">
            <button className="counter--minus" onClick={subtract}>–</button>
            <div className="counter--count">
                <h1>{count}</h1>
            </div>
            <button className="counter--plus" onClick={add}>+</button>
        </div>

            const [count, setCount] = React.useState(0)

    function add() {
        setCount(prevCount => prevCount + 1)
    }
    
    function subtract() {
        setCount(prevCount => prevCount - 1)
    }
    
    einde voorbeeld

    vb 2:
        )
 function add() {
        setCount(prevCount => prevCount + 1)
    }
    
    function subtract() {
        setCount(prevCount => prevCount - 1)
    }
    
    console.log("App component rendered")
    
    return (
        <div className="counter">
            <button className="counter--minus" onClick={subtract}>–</button>
            <Count number={count} />
            <button className="counter--plus" onClick={add}>+</button>
        </div>



export default function Count(props) {
    console.log("Count component rendered")
    
    return (
        <div className="counter--count">
            <h1>{props.number}</h1>
        </div>
    )
}

einde voorbeeld2


==============================

component:

    vars:
        data
        header
        values

    functies:
        handleCsvUpload() -> vult data, header, values
        trainModel() -> gebruikt header, values
            * wanneer je deze knopt drukt, header en values niet leeg zijn
            -> getSelectedData()


            
===============

- input csvfile dump (lees headers en vaules en data)
- upload: get headers in 2 kollomen van input en outputs
- select input & select outputs
- train trainModel
    form, keuze voor model, cross val etc, en andere settings 
- load trainModel
- form met selected inputs
- use model



{
    "id":1,
    "name":"john",
    "area":123,

    "isChecked": false    
    
}




<table>
<tr>
    <td> </td>
    <td> </td>
    <td> </td> <---- 0, isChecked
</tr>
<tr>
    <td> </td>
    <td> </td>
    <td> </td> <----- 0, isChecked
</tr>
</table>

----------------------------
row 1 data 1 | row 1 data 2
row 2 data 1 | row 2 data 2