import React, { useState } from 'react';
import Papa from 'papaparse';

export default function CsvUpload({ handleBackClick, onSubmit }) {
  const [data, setData] = useState([]);

  const handleCsvUpload = (e) => {
    const file = e.target.files[0];

    Papa.parse(file, {
      header: true,
      dynamicTyping: true,
      complete: function (results) {
        // console.log(results.data);
        console.log('CSV Headers:', Object.keys(results.data[0]));
        setData(results.data);
      },
    });
  };

  return (
    <div className="mupload">
      <input type="file" accept=".csv" onChange={handleCsvUpload} />
      {data.length ? (
        <table className="table">
          <thead>
            <tr>
              <th>id</th>
              <th>name</th>
              <th>area</th>
            </tr>
          </thead>
          <tbody>
            {data.map((row, index) => (
              <tr key={index}>
                <td>{row.id}</td>
                <td>{row.name}</td>
                <td>{row.area}</td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : null}
    </div>
  );
}

test 2 headers displayed in a list: 
import React, { useState } from 'react';
import Papa from 'papaparse';

export default function CsvUpload({ handleBackClick, onSubmit }) {
  const [data, setData] = useState([]);
  const [csvHeaders, setCsvHeaders] = useState([]);

  const handleCsvUpload = (e) => {
    const file = e.target.files[0];

    Papa.parse(file, {
      header: true,
      dynamicTyping: true,
      complete: function (results) {
        // console.log(results.data);
        const headers = Object.keys(results.data[0]);
        setCsvHeaders(headers);
        console.log('CSV Headers:', Object.keys(results.data[0]));
        setData(results.data);
      },
    });
  };

  return (
    <div className="mupload">
      <input type="file" accept=".csv" onChange={handleCsvUpload} />
      {data.length ? (
        <table className="table">
          <thead>
            <tr>
              <th>id</th>
              <th>name</th>
              <th>area</th>
            </tr>
          </thead>
          <tbody>
            {data.map((row, index) => (
              <tr key={index}>
                <td>{row.id}</td>
                <td>{row.name}</td>
                <td>{row.area}</td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : null}

      <div>
        {csvHeaders.length > 0 && (
          <ul>
            {csvHeaders.map((header, index) => (
              <li key={index}>{header}</li>
            ))}
          </ul>
        )}
      </div>
    </div>


  );
}

test 3

